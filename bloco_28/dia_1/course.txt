- O que é o JWT?

O JWT (JSON Web Token) é um token gerado a partir de dados "pessoais" que pode ser trafegado pela internet ao
fazer requisições para APIs e afins. Mas atenção: toda a informação que colocamos no JWT é pública, e qualquer
pessoa com o token consegue ler essas informações. O mecanismo de segurança do JWT permite, no entanto, que apenas
quem tem a senha consiga alterar as informações contidas em um token.

A coisa toda funciona assim:
. O navegador solicita que o usuário digite seu login e senha.
. O navegador então envia esse login e senha ao servidor, para verificar que esses dados estão corretos.
. Uma vez que valida login e senha, o servidor cria dois objetos: um contendo informações sobre o token que será
gerado, que chamamos de header, e outro contendo os dados do usuário e as permissões que aquela pessoa têm, ao 
qual chamamos de payload.
. O servidor então converte esses dois objetos em JSON, junta-os em uma mesma string e utiliza um algoritmo
chamado HMAC para "criptografar" essa string usando um "segredo" que só ele sabe, gerando o que chamamos de
assinatura, que nada mais é do que Header + Payload criptografados.
. Por fim, o servidor combina o header, o payload originais e a assinatura, criando assim o token.
. O token é enviado ao cliente, que o armazena para utilizá-lo nas próximas requisições.

Chamamos de autenticação o processo pelo qual a pessoa usuária consegue, utilizando informações confidenciais como
email e senha, efetuar login com sucesso em uma aplicação, tendo como retorno um JSON Web Token pelo qual é
possível acessar suas permissões de navegação.

Na próxima requisição...
. O navegador envia ao servidor os dados para, por exemplo, cadastrar um novo produto. Juntamente a esses dados, o
navegador envia o token que recebeu ao realizar o login.
. Quando recebe os dados, a primeira coisa que o servidor faz é obter o Header e o Payload do token e
criptografá-los, gerando, mais uma vez, a assinatura.
. O servidor, então, compara a nova assinatura com a assinatura que foi enviada pelo client. Se ambas forem iguais,
quer dizer que o conteúdo do Header e do Payload não foram modificados desde o login.
. Agora que já sabe que o token é válido, o servidor continua processando a requisição e, por fim, entrega a
resposta para o cliente.

O JWT também é usado para autorização, quando precisamos fazer o processo de atestar as permissões de uma pessoa
usuária que deseja acessar uma rota ou recurso protegido. Isso exige o envio do token, normalmente no header
Authorization, a partir do qual são acessadas as informações necessárias para a verificação.

Mas o que acontece se, antes de tentar cadastrar um produto, a pessoa que está usando nossa aplicação tentar
alterar o token?

Perceba que, para que a pessoa usuária consiga alterar o seu token e obter privilégios a mais, ela precisaria
gerar uma nova assinatura. Acontece que, para gerar uma nova assinatura, é necessário possuir o segredo, que apenas
o servidor possui. Sendo assim, é virtualmente impossível adulterar um token JWT, o que torna essa tecnologia muito
confiável para tratar de autenticação.

- Autenticação e Autorização

É importante ressaltar que autenticação e autorização são coisas diferentes. Autenticação é usada para atestar que
alguém é quem diz ser, verificando sua identidade, comumente feita por meio de informações confidenciais como email
e senha. Já a autorização verifica as permissões de uma pessoa para acessar ou executar determinadas operações.
O simples fato de se estar autenticado pode dar várias permissões para a pessoa usuária, mas ainda pode haver
situações em que sejam exigidas autorizações extras, além da autenticação inicial. A partir disso, podemos concluir
que a autenticação sempre precede a autorização.

- O que é HMAC?

O HMAC é um algoritmo para gerar um MAC (código de autenticação de mensagem) criptografado através de algum
algoritmo de hash (algoritmos que codificam mensagens), como md5, sha1 ou sha256, a partir de uma chave secreta
(uma senha) e de uma mensagem qualquer. Por exemplo, se gerarmos o HMAC da mensagem "Olá, tudo bem?", com o segredo
"minhaSenha" e o algoritmo sha1, teremos o seguinte resultado: b88651e71c7c757560722b52e5f1ead754a759d8. No
entanto, se alterarmos o texto para "olá, tudo bem?", mudando apenas a capitalização da primeira letra, o resultado
passa a ser ac7016fd2014ca9a79ac2e3ef16b6bd857f91f7a. Agora, imagine que, ao invés de "Olá, tudo bem?" façamos
isso com o payload do nosso token. Ao mudar qualquer mínimo detalhe das informações daquele token, a assinatura se
torna inválida.

- Entendendo o JWT

O resultado final do JWT dá-se através da assinatura criptográfica de dois blocos de JSON codificados em base64.
Esses dois blocos JSON codificados são o header (cabeçalho) e payload (carga). A signature (assinatura) é a junção
dos hashes gerados a partir do header e payload.

. Header: contém duas propriedades: o tipo do token, que é JWT, e o tipo do algoritmo de hash, como HMAC-SHA256 ou
RSA.

{
  "alg": "HS256",
  "typ": "JWT"
}

. Payload: é a segunda parte do token, que contém os "dados". Esses "dados" são declarações sobre uma entidade
(geralmente, o usuário).

{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}

. Signature: para gerar a assinatura, você deve usar o header e o payload codificados em base64, usando o algoritmo
definido no header.

Código de exemplo:

  import { hmac } from 'bibliotecaDeHmac';

  function base64 (string) {
    return Buffer.from(string).toString('base64');
  }

  const header = JSON.stringify({
    alg: 'HS256',
    type: 'JWT'});

  const payload = JSON.stringify({
    sub: '1234567890',
    name: 'John Doe',
    admin: true});

  const secret = 'MinhaSenhaMuitoComplexa123';

  const assinatura = hmac(`${base64(header)}.${base64(payload)}`, secret);

  const token = `${base64(header)}.${base64(payload)}.${base64(assinatura)}`;

O resultado terá a seguinte estrutura:
(Header em base64).(Payload em base64).(Signature em base64)

Exemplo de resultado:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ.2Ye5_w1z3zpD4dSGdRp3s98Zip
CNQqmsHRB9vioOx54

Nesse caso, temos:
Header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
Payload: eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ
Signature: 2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54

Um exemplo de envio de um JWT via header em uma requisição HTTP:
 GET /foo/bar HTTP/1.1
 Host: www.exemplo.com
 Authorization: Bearer (Header em base64).(Payload em base64).(Signature em base64)

Ou seja, por ser algo que é transmitido via HTTP, JWT pode ser usado com qualquer linguagem que suporte os
requisitos mínimos para gerar o token e enviar uma requisição HTTP, como, por exemplo, Java, C#, PHP ou Python.
