// NodeJS ASSERT

// O m√≥dulo Assert √© uma ferramenta de aferi√ß√£o que permite testar express√µes. Esse m√≥dulo j√° vem instalado com o NodeJS. Podemos entender o assert como sendo uma express√£o booleana que ser√° sempre true, ao menos que haja uma falha. Por esse motivo, o assert n√£o dar√° feedback se o teste n√£o falhar.
// Se a express√£o assert √© avaliada com o valor 0 ou false, o teste falhar√° e o programa ser√° terminado. O assert possui v√°rios m√©todos para testar se o seu c√≥digo funciona como o esperado. Veremos nos exemplos a seguir alguns desses m√©todos. Esta √© a forma mais simples de se escrever testes.

// Acompanhe um exemplo do uso do m√≥dulo assert abaixo:
const assert = require('assert'); // Sintaxe para incluir o m√≥dulo assert

assert.strictEqual(50, 50); // Sem erros: 50 == 50
assert.strictEqual(50, 70); // AssertionError: 50 == 70

// --------

// Neste outro exemplo utilizamos o assert para testar o retorno esperado da fun√ß√£o division:
const assert = require('assert');

function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.strictEqual(expected, 3, 'Nove dividido por tr√™s √© igual a tr√™s');

// --------

/**
 * Os dois c√≥digos acima utilizam o m√©todo assert.strictEqual. Esse m√©todo compara o primeiro e o segundo par√¢metro utilizando o operador ===. Se os valores ou os tipos forem diferentes, o teste falhar√° e ser√° mostrado um erro com a mensagem que est√° no terceiro par√¢metro, se houver (o terceiro par√¢metro √© opcional).
 * A vantagem de se usar o m√©todo assert.strictEqual() neste contexto √© deixar mais clara a inten√ß√£o do teste. Entretanto, √© importante refor√ßar que o assert.equal faz uma compara√ß√£o de valor com o operador ==. Portanto, se voc√™ colocar o n√∫mero 3 dentro de aspas o teste assert.equal(expected, '3', 'Nove dividido por tr√™s √© igual a tr√™s') ir√° passar pois o m√©todo .equal n√£o checa o tipo de valor que estamos comparando - nesse caso, '3' √© uma string.
 * Assim sendo, prefira m√©todos que comparam se dois valores s√£o estritamente iguais, isto √©, valor e tipo. Como voc√™ ver√° nos pr√≥ximos exemplos, o .strictEqual e o .deepStrictEqual comparam os par√¢metros fornecidos utilizando o operador ===.
*/

/** Alguns outros m√©todos do m√≥dulo assert que nos permite escrever testes s√£o:
 * assert.strictEqual()
 * assert.deepStrictEqual()
 * assert.notStrictEqual()
 * assert.ok()
 * assert.fail()
*/

// --------

// Podemos combinar v√°rios m√©todos do assert quando escrevemos nossos testes. Isso pode ser muito √∫til para ampliar a cobertura do teste em casos de falhas!
const assert = require('assert');

function add(a, b) {
  return a + b;
}

const expected = add(1, 2);

assert.ok(expected === 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro argumento √© verdadeiro
assert.strictEqual(expected, 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro e segundo argumentos s√£o iguais em valor e tipo (===)
assert.notStrictEqual(expected, 4, 'Um mais dois √© igual a tr√™s (e n√£o quatro!)'); // Checa se o primeiro e segundo argumentos s√£o diferentes (!==)

// Lembre-se que a mensagem do erro aparece apenas quando o teste falha.

// -------

// √â poss√≠vel tamb√©m testar estruturas como arrays e objetos:
const assert = require('assert');

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

assert.deepStrictEqual(list1, list2, 'Erro: list1 e list2 n√£o s√£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 n√£o s√£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos s√£o estritamente iguais');

// Para que o teste falhe, experimente passar como segundo par√¢metro para o √∫ltimo teste o objeto person2. Voc√™ ver√° que o teste ir√° falhar, pois ele espera que os valores dos objetos passados como argumento sejam diferentes.

// -------
//  TESTES UNIT√ÅRIOS E A MELHORIA NO C√ìDIGO

// Um papel dos testes unit√°rios √© nos ajudar a implementar fun√ß√µes mais robustas. Veja, por exemplo, a fun√ß√£o que realiza a divis√£o utilizada no modelo anterior:

function division(x, y) {
  return x / y;
}

// O que acontece se criarmos o teste abaixo?

const assert = require('assert');

// declara√ß√£o da fun√ß√£o division, definida anteriormente...


assert.strictEqual(division(10, 2), 5); // OK
assert.strictEqual(division(10, 0), 0); // üí£

/*
O primeiro assert.strictEqual funciona e n√£o apresenta erro, mas o segundo deixa evidente uma fragilidade na implementa√ß√£o da fun√ß√£o division, pois n√£o poderia ser poss√≠vel realizar a divis√£o por 0. Nesse caso, devemos melhorar a implementa√ß√£o da fun√ß√£o division, a fim de n√£o termos mais esse estado inconsistente.
Podemos fazer isso usando a palavra chave throw, que no javascript serve para lan√ßar um erro. Usaremos ele, ent√£o, para lan√ßar um erro caso o divisor y seja igual a zero.
*/

const assert = require('assert');

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

assert.strictEqual(division(10, 2), 5); // OK
assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK

const assert = require('assert');

// Atualizamos o teste para refletir a mudan√ßa de implementa√ß√£o para essa situa√ß√£o, verificando n√£o s√≥ se o erro √© lan√ßado, mas tamb√©m se √© o erro esperado. Ou seja, os testes unit√°rios tamb√©m nos ajudam a identificar casos especiais que podem levar nossas fun√ß√µes a estados inv√°lidos.

// --------

// SOBRE O THROW

// Ao executar os c√≥digos escritos por voc√™, n√£o h√° d√∫vidas de que voc√™ j√° se deparou com mensagens de erro quando algo n√£o estava fazendo o que deveria. Seja um erro de sintaxe ou uma vari√°vel indefinida em algum lugar, lidar com erros √© uma tarefa comum na vida de qualquer pessoa desenvolvedora.
// Mas nem sempre os erros precisam ser gerados originariamente pela linguagem, como voc√™ j√° se habituou a ver. Quem est√° escrevendo o c√≥digo tamb√©m pode criar erros , bem como determinar que eles sejam lan√ßados se o c√≥digo se comportar de uma maneira inesperada!
// O ato de criar erros novos, tamb√©m chamado de lan√ßar exce√ß√µes , √© algo important√≠ssimo para casos em que o c√≥digo em si executa normalmente pelos padr√µes da linguagem, mas a pessoa que o escreveu n√£o quer que ele execute nessa hip√≥tese espec√≠fica.

// Dito isso, vamos rever o exemplo acima de um erro lan√ßado usando throw :
function division(x, y) {
  // Queremos que o c√≥digo retorne um erro com uma mensagem espec√≠fica
  // caso o par√¢metro y seja 0. Por isso lan√ßamos uma exce√ß√£o se essa condi√ß√£o
  // for verdadeira, o que ir√° interromper a execu√ß√£o da fun√ß√£o.

  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

/**
 * Nesse caso, com o erro sendo lan√ßado dentro de uma fun√ß√£o, a sua execu√ß√£o ir√° parar naquele exato momento e, caso n√£o exista um bloco de captura do erro que indique o que fazer quando ele ocorre (voc√™ ir√° aprender mais sobre isso ao estudar JS Ass√≠ncrono e Promises), o programa como um todo ter√° a sua execu√ß√£o interrompida.
 * Voc√™ n√£o precisa se preocupar muito com essa parte de gerenciamento de erros por enquanto, pois se trata de uma ferramenta mais avan√ßada do que voc√™ precisaria saber nesse momento. O que voc√™ precisa saber √© que o throw serve justamente a esse fim: lan√ßar exce√ß√µes criadas pela pessoa desenvolvedora e retornar erros que n√£o existiriam originalmente no c√≥digo sem ele.
 */
